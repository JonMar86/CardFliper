@inject IJSRuntime JSRuntime
@inject IGameSaverService SaverService
@inject ICardsGenerator GeneratorService

<h3>@this.StateText</h3>
@if (this.GameOn && this.CurrentGame.MatchesLeft > 0)
{
    <h4>Mismatches: @this.CurrentGame.Mismatches</h4>
}

<div style="@this.DynamicCss">

    @if (this.GameOn)
    {
        <GameBoard Cards="this.TrackedCards" AllowedToFlipUp="this.IsAllowedToFlipCards" OnFlippedUp="this.CheckForMatch" />
    }
    else
    {
        <GameSelector OnSelectionMade="StartNewGame" />
    }

</div>

@if (this.GameOn)
{
    <div class="game-score">
        <GameRestarter OnRestarting="BackToGameSelection" />

        @if (this.GameOn && this.CurrentGame.MatchesLeft > 0)
        {
            <GameSaver CurrentGameState="this.CurrentGame" OnFinishedSaving="BackToGameSelection" />
        }
    </div>
}
else
{
    <GameLoader OnGameLoaded="LoadPriorGame" />
}

@code
{
    public const int SecondsToWaitOnMismatch = 3;

    private CardData lastCard = null;
    private string priorGame = null;

    public GameState CurrentGame { get; set; }

    public CardLayout TrackedCards { get; set; }

    public bool IsWaiting { get; private set; } = false;

    public string DynamicCss { get; set; } = string.Empty;

    public string StateText { get; set; } = "Select your difficulty";

    public bool GameOn { get; set; } = false;

    public List<int> FoundMatches { get; } = new List<int>();

    public bool IsMatched(int index)
    {
        return this.FoundMatches.Contains(index);
    }

    public bool IsAllowedToFlipCards()
    {
        return !this.IsWaiting;
    }

    public async Task CheckForMatch(CardData card)
    {
        this.FoundMatches.Add(card.Index);

        if (lastCard == null)
        {
            // First pick
            lastCard = card;
            this.StateText = "Find the next match";
        }
        else if (lastCard != card && lastCard.DisplayText == card.DisplayText)
        {
            // Match found
            lastCard = null;            
            this.CurrentGame.MatchesFound = this.FoundMatches.ToArray();

            if (this.CurrentGame.MatchesLeft > 0)
            {
                this.StateText = "You found a match!";
            }
            else
            {
                this.StateText = "You win!";
                this.DynamicCss = "background-color: royalblue;";
                await SaverService.StoreHighScore(DateTime.Now.ToString(), $"Matched {this.CurrentGame.TotalCards} with {this.CurrentGame.Mismatches} mismatch{(this.CurrentGame.Mismatches != 1 ? "es" : "")} ");
            }
        }
        else
        {
            // No match
            this.StateText = "Sorry - No match";
            this.CurrentGame.Mismatches++;
            this.DynamicCss = "background-color: orangered;";
            base.StateHasChanged();

            this.IsWaiting = true;
            await Task.Delay(SecondsToWaitOnMismatch * 1000);

            lastCard.IsMatched = false;
            lastCard.IsFaceUp = false;

            card.IsMatched = false;
            card.IsFaceUp = false;

            this.FoundMatches.Remove(card.Index);
            this.FoundMatches.Remove(lastCard.Index);
            lastCard = null;
            this.StateText = "Match pairs!";
            this.DynamicCss = string.Empty;
        }

        this.IsWaiting = false;
        base.StateHasChanged();
    }

    private void StartNewGame(int cards, int repeatsPerCard)
    {
        if (this.CurrentGame == null || this.CurrentGame.TotalCards != cards)
        {
            this.TrackedCards = GeneratorService.GenerateCards(cards, repeatsPerCard);
            this.CurrentGame = new GameState
            {
                UniqueCards = cards,
                RepeatsPerCard = repeatsPerCard,
                Seed = this.TrackedCards.RngSeed,
            };
        }

        this.GameOn = true;
        base.StateHasChanged();
    }

    private void BackToGameSelection()
    {
        this.CurrentGame = null;
        this.FoundMatches.Clear();
        this.DynamicCss = string.Empty;
        this.StateText = "Select your difficulty";
        this.GameOn = false;
        base.StateHasChanged();
    }

    private void LoadPriorGame(GameState state)
    {
        this.CurrentGame = state;
        this.TrackedCards = GeneratorService.GenerateCards(state);

        this.FoundMatches.AddRange(state.MatchesFound);
        base.StateHasChanged();
    }
}
