@inject IJSRuntime JSRuntime

<h3>@this.StateText</h3>
@if (this.GameOn && this.MatchesLeft > 0)
{
    <h4>Mismatches: @this.CurrentGame.Mismatches</h4>
}

<div style="@this.DynamicCss">

    @if (this.GameOn)
    {
        <GameBoard ColumnCount="this.ColumnCount" RowCount="this.RowCount" DisplayList="this.TrackedCards" Grid="this" />
    }
    else
    {
        <GameSelector OnSelectionMade="GenerateCards" />
    }

</div>

@if (this.GameOn)
{
    <div class="game-score">
        <div>
            <h3>Matched @this.CurrentGame.TotalCards cards with @this.CurrentGame.Mismatches mismatched</h3>
        </div>

        <GameRestarter OnRestarting="StartNewGame" />

        @if (this.GameOn && this.MatchesLeft > 0)
        {
            <GameSaver CurrentGameState="this.CurrentGame" OnFinishedSaving="StartNewGame" />
        }
    </div>
}
else
{
    <GameLoader OnGameLoaded="LoadPriorGame" />
}

@code
{
    public const int SecondsToWaitOnMismatch = 3;

    private CardDisplay lastCard = null;
    private string priorGame = null;

    public int RowCount { get; set; } = -1;

    public int ColumnCount { get; set; } = -1;

    public GameState CurrentGame { get; set; }

    public IList<string> TrackedCards { get; set; }

    public string SimpleGridColClass => $"col-{12 / this.ColumnCount}";

    public bool IsWaiting { get; private set; } = false;

    public string DynamicCss { get; set; } = string.Empty;

    public string StateText { get; set; } = "Select your difficulty";

    public bool GameOn { get; set; } = false;

    public int MatchesLeft { get; set; } = -1;

    public List<int> FoundMatches { get; } = new List<int>();

    public bool IsMatched(int index)
    {
        return this.FoundMatches.Contains(index);
    }

    public bool IsAllowedToFlipCards()
    {
        return !this.IsWaiting;
    }

    public async Task CheckForMatch(CardDisplay card)
    {
        this.FoundMatches.Add(card.Index);

        if (lastCard == null)
        {
            // First pick
            lastCard = card;
            this.StateText = "Find the next match";
        }
        else if (lastCard != card && lastCard.DisplayedSide == card.DisplayedSide)
        {
            // Match found
            lastCard = null;
            this.MatchesLeft--;
            this.CurrentGame.MatchesFound = this.FoundMatches.ToArray();

            if (this.MatchesLeft > 0)
            {
                this.StateText = "You found a match!";
            }
            else
            {
                this.StateText = "You win!";
                this.DynamicCss = "background-color: royalblue;";
            }
        }
        else
        {
            // No match
            this.StateText = "Sorry - No match";
            this.CurrentGame.Mismatches++;
            this.DynamicCss = "background-color: orangered;";
            base.StateHasChanged();

            this.IsWaiting = true;
            await Task.Delay(SecondsToWaitOnMismatch * 1000);
            lastCard.FlipFaceDown();
            card.FlipFaceDown();
            this.FoundMatches.Remove(card.Index);
            this.FoundMatches.Remove(lastCard.Index);
            lastCard = null;
            this.StateText = "Match pairs!";
            this.DynamicCss = string.Empty;
        }

        this.IsWaiting = false;
        base.StateHasChanged();
    }

    private void GenerateCards(int cards)
    {
        if (this.CurrentGame == null || this.CurrentGame.TotalCards != cards)
        {
            this.CurrentGame = new GameState
            {
                TotalCards = cards,
                Seed = DateTime.Now.Millisecond,
            };
        }

        var list = new List<string>(cards);

        char letter = 'A';
        for (int i = 0; i < cards; i += 2)
        {
            string display = letter.ToString();

            // Add a pair
            list.Add(display);
            list.Add(display);
            letter++;
        }

        Scramble(list);

        int square = (int)Math.Sqrt(cards);

        this.RowCount = square;
        this.ColumnCount = square;

        this.TrackedCards = list;

        this.MatchesLeft = cards;
        this.GameOn = true;
        base.StateHasChanged();
    }

    private void Scramble(List<string> list)
    {
        var rng = new Random(this.CurrentGame.Seed);

        int lastIndex = list.Count - 1;
        for (int i = 0; i < list.Count; i++)
        {
            int randoIndex = rng.Next(0, lastIndex);
            string temp = list[i];
            list[i] = list[randoIndex];
            list[randoIndex] = temp;
        }
    }

    private void StartNewGame()
    {
        this.CurrentGame = null;
        this.FoundMatches.Clear();
        this.MatchesLeft = -1;
        this.DynamicCss = string.Empty;
        this.StateText = "Select your difficulty";
        this.GameOn = false;
        base.StateHasChanged();
    }

    private void LoadPriorGame(GameState state)
    {
        this.CurrentGame = state;
        GenerateCards(state.TotalCards);

        this.FoundMatches.AddRange(state.MatchesFound);
    }
}
