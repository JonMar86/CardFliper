<div class="game-container container">
    @for (int r = 0; r < this.RowCount; r++)
    {
        <div class="row">
            @for (int c = 0; c < this.ColumnCount; c++)
            {
                <div class="@this.SimpleGridColClass">
                    <CardDisplay DisplayedSide="@this.TrackedCards[GridToIndex(r,c)]" Grid="@this" />
                </div>
            }
        </div>
    }
</div>

@code
{
    public const int SecondsToWaitOnMismatch = 5;

    private int index = 0;

    private CardDisplay lastCard = null;

    public int GridToIndex(int r, int c)
    {
        return r * this.RowCount + c;
    }

    public int RowCount { get; set; } = 4;

    public int ColumnCount { get; set; } = 4;

    public IList<string> TrackedCards { get; set; } = new List<string>
    {
        // Demo list
        "A", "B", "C", "D",
        "A", "B", "C", "D",
        "E", "F", "G", "H",
        "E", "F", "G", "H",
    };

    public string SimpleGridColClass => $"col-{12 / this.ColumnCount}";

    public bool IsWaiting { get; private set; } = false;

    public async Task CheckForMatch(CardDisplay card)
    {
        if (lastCard == null)
        {
            // First pick
            lastCard = card;
            return;
        }

        if (lastCard == card)
            return; // Ignore

        if (lastCard.DisplayedSide == card.DisplayedSide)
        {
            // Match found            
            lastCard = null;
        }
        else
        {
            // No match
            this.IsWaiting = true;
            await Task.Delay(SecondsToWaitOnMismatch * 1000);
            card.FlipFaceDown();
            lastCard.FlipFaceDown();
            lastCard = null;
        }

        this.IsWaiting = false;
        base.StateHasChanged();
    }
}
